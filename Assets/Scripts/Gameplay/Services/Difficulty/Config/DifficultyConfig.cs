using System;
using System.Collections.Generic;
using Gameplay.Magic;
using Gameplay.Services.Boss;
using UnityEngine;
using UnityEngine.AddressableAssets;
using Random = UnityEngine.Random;

namespace Gameplay.Services.Difficulty.Config
{
    [CreateAssetMenu(menuName = "CreateConfig/" + nameof(DifficultyConfig), fileName = nameof(DifficultyConfig))]
    public class DifficultyConfig : ScriptableObject
    {
        public List<DifficultySection> sections = new();

        [Serializable]
        public struct DifficultySection
        {
            public List<MagicPickupable> allowedPickupables;

            public List<BossConfig> bossesConfigs;

            public void GenerateBossConfigs()
            {
                foreach (var bossConfig in bossesConfigs)
                {
                    if(!bossConfig.autoGenerated)
                        continue;
                    
                    bossConfig.Generate(allowedPickupables);
                }
            }
        }

        [Serializable]
        public struct BossConfig
        {
            public AssetReferenceGameObject bossReference;
            public List<AutomationMagicComponentBinder.AbilityInterval> abilityIntervals;

            [Space, Header("AUTO GENERATION")] 
            public bool autoGenerated;
            public int requiredCount;
            public float minInterval, maxInterval;

            public void Generate(List<MagicPickupable> allowed)
            {
                for (var i = 0; i < requiredCount; i++)
                {
                    abilityIntervals.Add(new AutomationMagicComponentBinder.AbilityInterval()
                    {
                        beforeInterval = Random.Range(minInterval, maxInterval),
                        pickupablePrefab = allowed[Random.Range(0, allowed.Count)]
                    });
                }
            }
        }
    }
}